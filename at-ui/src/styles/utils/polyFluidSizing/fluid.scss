@use "sass:math";

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
    $newList: ();

    @for $i from 1 through length($list) {
        @if $i !=$index {
            $newList: append($newList, nth($list, $i), "space");
        }
    }

    @return $newList;
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
    $keys: map-keys($map);

    @if (length($keys) !=2) {
        @error "linear-interpolation() $map must be exactly 2 values";
    }

    // The slope
    $m: math.div(map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)), nth($keys, 2) - nth($keys, 1));

    // The y-intercept
    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

    // Determine if the sign should be positive or negative
    $sign: "+";

    @if ($b < 0) {
        $sign: "-";
        $b: abs($b);
    }

    @return calc(#{$m * 100}vw #{$sign} #{$b});
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
    $sortedlist: ();

    @while length($list) >0 {
        $value: nth($list, 1);

        @each $item in $list {
            @if $item < $value {
                $value: $item;
            }
        }

        $sortedlist: append($sortedlist, $value, "space");
        $list: list-remove($list, index($list, $value));
    }

    @return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
    $keys: list-sort(map-keys($map));
    $sortedMap: ();

    @each $key in $keys {
        $sortedMap: map-merge(
            $sortedMap,
            (
                $key: map-get($map, $key)
            )
        );
    }

    @return $sortedMap;
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
    $result: ();

    // Get the number of provided breakpoints
    $length: length(map-keys($map));

    // Error if the number of breakpoints is < 2
    @if ($length < 2) {
        @error "poly-fluid-sizing() $map requires at least two values";
    }

    // Sort the map by viewport width (key)
    $map: map-sort($map);
    $keys: map-keys($map);

    // Minimum size
    & {
        #{$property}: map-get($map, nth($keys, 1));
    }

    // Interpolated size through breakpoints
    @for $i from 1 through ($length - 1) {
        $result: ();
        $low-values: map-get($map, nth($keys, $i));
        $high-values: map-get($map, nth($keys, ($i + 1)));
        $total: length($low-values);
        $low-separator: list-separator(nth($keys, $i));
        $high-separator: list-separator(nth($keys, $i + 1));

        @if ($low-separator !=$high-separator) {
            @error "poly-fluid-sizing() values must use the same separator";
        }

        @media (min-width: nth($keys, $i)) {
            @if (length($low-values) !=length($high-values)) {
                @error "poly-fluid-sizing() values must have same number args";
            }

            @for $j from 1 through $total {
                $value1: nth($low-values, $j);
                $value2: nth($high-values, $j);
                $key1: nth($keys, $i);
                $key2: nth($keys, $i + 1);

                @if ($value1 !=$value2) {
                    $result: append(
                        $result,
                        linear-interpolation(
                            (
                                $key1: $value1,
                                $key2: $value2
                            )
                        ),
                        $low-separator
                    );
                } @else {
                    $result: append($result, $value1, $low-separator);
                }
            }

            #{$property}: $result;
        }
    }

    // Maxmimum size
    @media (min-width: nth($keys, $length)) {
        #{$property}: map-get($map, nth($keys, $length));
    }
}

/* -----
Fluid function:
@include fluid('font-size', ( m: 10px, l: 12px, xl: 14px));
----- */
@mixin fluid($property, $map) {
    $keys: map-keys($map);
    $length: length($keys);
    $newMap: ();

    @each $key in $keys {
        @if (map-has-key($breakpoints, $key)) {
            $newMap: map-merge(
                $newMap,
                (
                    (map-get($breakpoints, $key) * 1px):
                        (
                            map-get($map, $key)
                        )
                )
            );
        } @else {
            $newMap: map-merge(
                $newMap,
                (
                    ($key * 1px):
                        (
                            map-get($map, $key)
                        )
                )
            );
        }
    }

    @include poly-fluid-sizing($property, $newMap);
}
